
bin\Debug\TIMER_CRC_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000002  00820000  00820000  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013d  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000dc  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012d  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a6  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_19>:
 */

#include <avr/io.h>
#include <avr/interrupt.h>
ISR(TIMER0_COMP_vect)
 {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
  7a:	af 93       	push	r26
  7c:	bf 93       	push	r27
  7e:	ef 93       	push	r30
  80:	ff 93       	push	r31
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    PORTC ^=1<<PC0;
  8a:	a5 e3       	ldi	r26, 0x35	; 53
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e5 e3       	ldi	r30, 0x35	; 53
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	89 27       	eor	r24, r25
  98:	8c 93       	st	X, r24

 }
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	ff 91       	pop	r31
  a0:	ef 91       	pop	r30
  a2:	bf 91       	pop	r27
  a4:	af 91       	pop	r26
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <Timer_init>:
  void Timer_init ()
  {
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
     TCNT0 = 0; //timer initial value
  bc:	e2 e5       	ldi	r30, 0x52	; 82
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
	OCR0  = 128; //compare value
  c2:	ec e5       	ldi	r30, 0x5C	; 92
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); //enable compare interrupt
  ca:	a9 e5       	ldi	r26, 0x59	; 89
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e9 e5       	ldi	r30, 0x59	; 89
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8c 93       	st	X, r24
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
  d8:	e3 e5       	ldi	r30, 0x53	; 83
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	8d e8       	ldi	r24, 0x8D	; 141
  de:	80 83       	st	Z, r24

  }
  e0:	cf 91       	pop	r28
  e2:	df 91       	pop	r29
  e4:	08 95       	ret

000000e6 <main>:
int main(void)
{
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
    DDRC |= 1<<PC0;
  ee:	a4 e3       	ldi	r26, 0x34	; 52
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e4 e3       	ldi	r30, 0x34	; 52
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	8c 93       	st	X, r24
    PORTC &= ~(1<<PC0);
  fc:	a5 e3       	ldi	r26, 0x35	; 53
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e5 e3       	ldi	r30, 0x35	; 53
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	8c 93       	st	X, r24
    SREG |=1<<7;
 10a:	af e5       	ldi	r26, 0x5F	; 95
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ef e5       	ldi	r30, 0x5F	; 95
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	8c 93       	st	X, r24
   Timer_init();
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <Timer_init>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x36>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
