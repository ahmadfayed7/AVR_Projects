
bin\Debug\External_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001ec  2**0
                  ALLOC
  2 .fuse         00000002  00820000  00820000  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005b  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000153  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ed  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000145  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ae  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_18>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
ISR (INT2_vect )
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
 static unsigned char num =0;
 if (num==9)
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	89 30       	cpi	r24, 0x09	; 9
  a0:	19 f4       	brne	.+6      	; 0xa8 <__vector_18+0x2c>
    num=0;
  a2:	10 92 60 00 	sts	0x0060, r1
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <__vector_18+0x36>
 else
    num++;
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 60 00 	sts	0x0060, r24
 PORTC =(PORTC&0xF0) |(num &0x0F);
  b2:	a5 e3       	ldi	r26, 0x35	; 53
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	8c 93       	st	X, r24
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <interrupt_init>:
void interrupt_init()
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
    SREG &=~(1<<7);
  ec:	af e5       	ldi	r26, 0x5F	; 95
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ef e5       	ldi	r30, 0x5F	; 95
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	8c 93       	st	X, r24
    DDRB &=~ (1<<PB2);
  fa:	a7 e3       	ldi	r26, 0x37	; 55
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e7 e3       	ldi	r30, 0x37	; 55
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	8c 93       	st	X, r24
    GICR |= (1<<INT2);
 108:	ab e5       	ldi	r26, 0x5B	; 91
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	eb e5       	ldi	r30, 0x5B	; 91
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8c 93       	st	X, r24
   MCUCSR |=(1<<ISC2);
 116:	a4 e5       	ldi	r26, 0x54	; 84
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e4 e5       	ldi	r30, 0x54	; 84
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8c 93       	st	X, r24
     SREG |=(1<<7);
 124:	af e5       	ldi	r26, 0x5F	; 95
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ef e5       	ldi	r30, 0x5F	; 95
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8c 93       	st	X, r24
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <main>:
int main(void)
{
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62

   interrupt_init();
 140:	0e 94 72 00 	call	0xe4	; 0xe4 <interrupt_init>
   DDRC =0x0F;
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	80 83       	st	Z, r24
   PORTC =0;
 14c:	e5 e3       	ldi	r30, 0x35	; 53
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	10 82       	st	Z, r1
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x1a>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
