
bin\Debug\TIMER_normal_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000208  2**0
                  ALLOC
  2 .fuse         00000002  00820000  00820000  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000057  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000153  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ed  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014d  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000af  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
 */

#include <avr/io.h>
#include <avr/interrupt.h>
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
   static int times =0;
   times++;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	90 91 61 00 	lds	r25, 0x0061
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 61 00 	sts	0x0061, r25
  a8:	80 93 60 00 	sts	0x0060, r24
   if(times==2)
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	61 f4       	brne	.+24     	; 0xd2 <__vector_9+0x56>
   {
       times=0;
  ba:	10 92 61 00 	sts	0x0061, r1
  be:	10 92 60 00 	sts	0x0060, r1
       PORTC ^=1<<PC0;
  c2:	a5 e3       	ldi	r26, 0x35	; 53
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e5 e3       	ldi	r30, 0x35	; 53
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	89 27       	eor	r24, r25
  d0:	8c 93       	st	X, r24
   }
}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <timer0_init>:
void timer0_init()
{   SREG |=(1<<7);
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	af e5       	ldi	r26, 0x5F	; 95
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ef e5       	ldi	r30, 0x5F	; 95
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8c 93       	st	X, r24
    TCNT0 =0;
 102:	e2 e5       	ldi	r30, 0x52	; 82
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
    TCCR0 = TCCR0 | (1<<CS00) | (1<<CS02) & ~(1<<CS01);  // FCPU/1024;
 108:	a3 e5       	ldi	r26, 0x53	; 83
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e3 e5       	ldi	r30, 0x53	; 83
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	85 60       	ori	r24, 0x05	; 5
 114:	8c 93       	st	X, r24
    TCCR0 |= (1<<FOC0);
 116:	a3 e5       	ldi	r26, 0x53	; 83
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e3 e5       	ldi	r30, 0x53	; 83
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	8c 93       	st	X, r24
    TCCR0 =TCCR0 & ~(1<<WGM01) &~ (1<<WGM00);  //normal mode
 124:	a3 e5       	ldi	r26, 0x53	; 83
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e3 e5       	ldi	r30, 0x53	; 83
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	87 7b       	andi	r24, 0xB7	; 183
 130:	8c 93       	st	X, r24
    TIMSK |=1<<TOIE0;
 132:	a9 e5       	ldi	r26, 0x59	; 89
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e9 e5       	ldi	r30, 0x59	; 89
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	8c 93       	st	X, r24

}
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <main>:
int main(void)
{
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
    DDRC |= 1<<PC0;
 14e:	a4 e3       	ldi	r26, 0x34	; 52
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e4 e3       	ldi	r30, 0x34	; 52
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	8c 93       	st	X, r24
    PORTC &= ~(1<<PC0);
 15c:	a5 e3       	ldi	r26, 0x35	; 53
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e5 e3       	ldi	r30, 0x35	; 53
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	8c 93       	st	X, r24
    timer0_init();
 16a:	0e 94 76 00 	call	0xec	; 0xec <timer0_init>
 16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0x28>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
