
bin\Debug\IO_interface_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000002  00820000  00820000  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000116  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b4  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000011d  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000093  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  DDRA  &= ~(1<<PA0) & ~(1<<PA1) &~(1<<PA2);
  78:	aa e3       	ldi	r26, 0x3A	; 58
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ea e3       	ldi	r30, 0x3A	; 58
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 7f       	andi	r24, 0xF8	; 248
  84:	8c 93       	st	X, r24
  DDRC  |= (1<<PC0) | (1<<PC1);
  86:	a4 e3       	ldi	r26, 0x34	; 52
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e4 e3       	ldi	r30, 0x34	; 52
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	8c 93       	st	X, r24

    while(1)
    {
         if(PINA |(1<<PA0))
  94:	e9 e3       	ldi	r30, 0x39	; 57
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
         {
             PORTC |= (1<<PC0);
  9a:	a5 e3       	ldi	r26, 0x35	; 53
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e5 e3       	ldi	r30, 0x35	; 53
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24
             PORTC &= ~(1<<PC1);
  a8:	a5 e3       	ldi	r26, 0x35	; 53
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e5 e3       	ldi	r30, 0x35	; 53
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	8c 93       	st	X, r24
         }
         if(PINA |(1<<PA1))
  b6:	e9 e3       	ldi	r30, 0x39	; 57
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
         {
            PORTC |= (1<<PC1);
  bc:	a5 e3       	ldi	r26, 0x35	; 53
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24
             PORTC &= ~(1<<PC0);
  ca:	a5 e3       	ldi	r26, 0x35	; 53
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e5 e3       	ldi	r30, 0x35	; 53
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8c 93       	st	X, r24
         }
         if(PINA |(1<<PA2))
  d8:	e9 e3       	ldi	r30, 0x39	; 57
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
         {
              PORTC &= ~(1<<PC0);
  de:	a5 e3       	ldi	r26, 0x35	; 53
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	8c 93       	st	X, r24
             PORTC &= ~(1<<PC1);
  ec:	a5 e3       	ldi	r26, 0x35	; 53
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e5 e3       	ldi	r30, 0x35	; 53
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	8c 93       	st	X, r24
  fa:	cc cf       	rjmp	.-104    	; 0x94 <main+0x28>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
