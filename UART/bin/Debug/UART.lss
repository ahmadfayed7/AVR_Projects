
bin\Debug\UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000002  00820000  00820000  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000091  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e9  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000138  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001dd  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cf  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 00 01 	call	0x200	; 0x200 <main>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
 */

#include <avr/io.h>

void UART_init()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

  UCSRA |=(1<<U2X);
  74:	ab e2       	ldi	r26, 0x2B	; 43
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	eb e2       	ldi	r30, 0x2B	; 43
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	8c 93       	st	X, r24
  UCSRB = (1<<RXEN) | (1<<TXEN);
  82:	ea e2       	ldi	r30, 0x2A	; 42
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	80 83       	st	Z, r24
  UCSRC |=(1<<URSEL) | (1<<UCSZ0) |(1<<UCSZ1);
  8a:	a0 e4       	ldi	r26, 0x40	; 64
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e0 e4       	ldi	r30, 0x40	; 64
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	86 68       	ori	r24, 0x86	; 134
  96:	8c 93       	st	X, r24
  UBRRL= 12;
  98:	e9 e2       	ldi	r30, 0x29	; 41
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	80 83       	st	Z, r24
  UBRRH= 12;
  a0:	e0 e4       	ldi	r30, 0x40	; 64
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	80 83       	st	Z, r24
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <send_byte>:
void send_byte(unsigned char data)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	0f 92       	push	r0
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
 UDR = data;
  ba:	ec e2       	ldi	r30, 0x2C	; 44
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	80 83       	st	Z, r24
 while(!(UCSRA&(1<<TXC))) ;
  c2:	eb e2       	ldi	r30, 0x2B	; 43
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	80 74       	andi	r24, 0x40	; 64
  ce:	90 70       	andi	r25, 0x00	; 0
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b9 f3       	breq	.-18     	; 0xc2 <send_byte+0x14>

UCSRA |=1<<TXC;
  d4:	ab e2       	ldi	r26, 0x2B	; 43
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	eb e2       	ldi	r30, 0x2B	; 43
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8c 93       	st	X, r24

}
  e2:	0f 90       	pop	r0
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	08 95       	ret

000000ea <recieve_byte>:
char recieve_byte()
{
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
UCSRA |= (1<<RXC);
  f2:	ab e2       	ldi	r26, 0x2B	; 43
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	eb e2       	ldi	r30, 0x2B	; 43
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	8c 93       	st	X, r24
UCSRA &= ~(1<<TXC);
 100:	ab e2       	ldi	r26, 0x2B	; 43
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e2       	ldi	r30, 0x2B	; 43
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	8c 93       	st	X, r24
while(!(UCSRA&(1<<RXC)));
 10e:	eb e2       	ldi	r30, 0x2B	; 43
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	dc f7       	brge	.-10     	; 0x10e <recieve_byte+0x24>
  return UDR;
 118:	ec e2       	ldi	r30, 0x2C	; 44
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <UART_send_String>:
void UART_send_String(unsigned char *str)
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	00 d0       	rcall	.+0      	; 0x12a <UART_send_String+0x6>
 12a:	00 d0       	rcall	.+0      	; 0x12c <UART_send_String+0x8>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9c 83       	std	Y+4, r25	; 0x04
 132:	8b 83       	std	Y+3, r24	; 0x03
    int i=0;
 134:	1a 82       	std	Y+2, r1	; 0x02
 136:	19 82       	std	Y+1, r1	; 0x01
 138:	0f c0       	rjmp	.+30     	; 0x158 <UART_send_String+0x34>
    while(str[i]!='\0')
    {
        send_byte(str[i]);
 13a:	29 81       	ldd	r18, Y+1	; 0x01
 13c:	3a 81       	ldd	r19, Y+2	; 0x02
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	9c 81       	ldd	r25, Y+4	; 0x04
 142:	fc 01       	movw	r30, r24
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	80 81       	ld	r24, Z
 14a:	0e 94 57 00 	call	0xae	; 0xae <send_byte>
        i++;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
  return UDR;
}
void UART_send_String(unsigned char *str)
{
    int i=0;
    while(str[i]!='\0')
 158:	29 81       	ldd	r18, Y+1	; 0x01
 15a:	3a 81       	ldd	r19, Y+2	; 0x02
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	fc 01       	movw	r30, r24
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	39 f7       	brne	.-50     	; 0x13a <UART_send_String+0x16>
    {
        send_byte(str[i]);
        i++;
    }
}
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	08 95       	ret

0000017a <UART_receiveString>:
void UART_receiveString(unsigned char *Str)
{
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	00 d0       	rcall	.+0      	; 0x184 <UART_receiveString+0xa>
 184:	0f 92       	push	r0
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9b 83       	std	Y+3, r25	; 0x03
 18c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
 18e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = recieve_byte();
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	9b 81       	ldd	r25, Y+3	; 0x03
 19a:	8c 01       	movw	r16, r24
 19c:	02 0f       	add	r16, r18
 19e:	13 1f       	adc	r17, r19
 1a0:	0e 94 75 00 	call	0xea	; 0xea <recieve_byte>
 1a4:	f8 01       	movw	r30, r16
 1a6:	80 83       	st	Z, r24
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = recieve_byte();
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ba:	8c 01       	movw	r16, r24
 1bc:	02 0f       	add	r16, r18
 1be:	13 1f       	adc	r17, r19
 1c0:	0e 94 75 00 	call	0xea	; 0xea <recieve_byte>
 1c4:	f8 01       	movw	r30, r16
 1c6:	80 83       	st	Z, r24
}
void UART_receiveString(unsigned char *Str)
{
	unsigned char i = 0;
	Str[i] = recieve_byte();
	while(Str[i] != '#')
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	9b 81       	ldd	r25, Y+3	; 0x03
 1d2:	fc 01       	movw	r30, r24
 1d4:	e2 0f       	add	r30, r18
 1d6:	f3 1f       	adc	r31, r19
 1d8:	80 81       	ld	r24, Z
 1da:	83 32       	cpi	r24, 0x23	; 35
 1dc:	31 f7       	brne	.-52     	; 0x1aa <UART_receiveString+0x30>
	{
		i++;
		Str[i] = recieve_byte();
	}
	Str[i] = '\0';
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	9b 81       	ldd	r25, Y+3	; 0x03
 1e8:	fc 01       	movw	r30, r24
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	10 82       	st	Z, r1
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <main>:

int main(void)
{
 200:	df 93       	push	r29
 202:	cf 93       	push	r28
 204:	0f 92       	push	r0
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62

    // Insert code
    UART_init();
 20a:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
    unsigned char data;
    while(1)
    {
        data= recieve_byte();
 20e:	0e 94 75 00 	call	0xea	; 0xea <recieve_byte>
 212:	89 83       	std	Y+1, r24	; 0x01
        send_byte(data);
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	0e 94 57 00 	call	0xae	; 0xae <send_byte>
 21a:	f9 cf       	rjmp	.-14     	; 0x20e <main+0xe>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
